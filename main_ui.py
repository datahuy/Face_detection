# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from typing import List
import argparse
import numpy as np

from PyQt5 import QtCore, QtGui, QtWidgets
from threads import DefaultProcess, RegisterProcess
from singletons import MilvusConnection

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self, network, weights) -> None:
        super(Ui_MainWindow, self).__init__()
        self.client = MilvusConnection()
        self.collection_name = self.client.list_collections()[0]
        self.regis_name = None
        self.default_mode = True
        self.default_process = DefaultProcess(network=network, weights=weights)
        self.register_process = RegisterProcess(network=network, weights=weights)
        self.default_process.update_frame.connect(self.update_frame)
        self.register_process.update_frame.connect(self.update_register_frame)
        self.register_process.update_vector.connect(self.add_new_to_db)
        self.default_process.start()
        
    
    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(779, 549)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 0, 641, 471))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(670, 40, 91, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.run_register)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(660, 80, 104, 71))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setEnabled(False)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(680, 160, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.confirm_name)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 779, 21))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "Face Recognition App"))
        self.label.setText(_translate("MainWindow", "Video"))
        self.pushButton.setText(_translate("MainWindow", "Register Mode"))
        self.pushButton_2.setText(_translate("MainWindow", "Confirm Name"))
        
    @QtCore.pyqtSlot(np.ndarray)
    def update_frame(self, frame):
        self.frame = frame
        self._set_video_frame()
        self.update()
        
    @QtCore.pyqtSlot(np.ndarray)
    def update_register_frame(self, frame):
        self.frame = frame
        self._set_video_frame()
        self.update()
        
        # self.register_process.stop()
        # self.default_process.set_start()
        # self.default_process.start()
            
        
    
    def _set_video_frame(self):
        img_h, img_w = self.frame.shape[:2]
        out = self.frame
        qimg = QtGui.QImage(out, img_w, img_h, img_w * 3,
                            QtGui.QImage.Format_RGB888).rgbSwapped()
        self.label.setPixmap(QtGui.QPixmap(qimg))
        
    def run_register(self):
        if self.default_mode:
            self.default_mode = False
            self.pushButton.setText("Default Mode")
            self.default_process.stop()
            self.register_process.set_start()
            self.register_process.start()
        else:
            self.default_mode = True
            self.pushButton.setText("Register Mode")
            self.register_process.stop()
            self.default_process.set_start()
            self.default_process.start()  
        
    def confirm_name(self):
        if self.textEdit.isEnabled():
            self.regis_name = self.textEdit.toPlainText()
    
    @QtCore.pyqtSlot(np.ndarray)       
    def add_new_to_db(self, vector):
        if not self.textEdit.isEnabled():
            self.textEdit.setEnabled(True)
        assert vector.shape[0] == 512
        if self.regis_name is not None:
            self.client.insert(collection_name=self.collection_name,
                               data={"name": self.regis_name,
                                     "vector": vector.tolist()})
            print("Add new person to db")
            self.regis_name = None
            if self.textEdit.isEnabled():
                self.textEdit.setEnabled(False)
            self.textEdit.clear()
            self.default_mode = True
            self.pushButton.setText("Register Mode")
            self.register_process.stop()
            self.default_process.set_start()
            self.default_process.start()  
            
        
        
def get_args():
    parser = argparse.ArgumentParser()
    
    parser.add_argument("--weights", type=str, default=r"F:\Face_Models\Arcface\backbone.pth")
    
    args = parser.parse_args()
    
    return args


if __name__ == "__main__":
    args = get_args()
    network = "r50"
    weights = args.weights
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow(network=network, weights=weights)
    ui.setupUi()
    ui.show()
    sys.exit(app.exec_())